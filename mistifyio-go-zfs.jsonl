{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/test_helpers_test.go::setupZPool", "test_loc": [66, 0], "test": "func setupZPool(t *testing.T) cleanUpFunc {\n    t.Helper()\n\n    d, err := ioutil.TempDir(\"/tmp/\", \"zfs-test-*\")\n    ok(t, err)\n\n    var skipRemoveAll bool\n    defer func() {\n        if !skipRemoveAll {\n            t.Logf(\"cleaning up\")\n            os.RemoveAll(d)\n        }\n    }()\n\n    tempfiles := make([]string, 3)\n    for i := range tempfiles {\n        f, err := ioutil.TempFile(d, fmt.Sprintf(\"loop%d\", i))\n        ok(t, err)\n\n        ok(t, f.Truncate(pow2(30)))\n\n        f.Close()\n        tempfiles[i] = f.Name()\n    }\n\n    pool, err := zfs.CreateZpool(\"test\", nil, tempfiles...)\n    ok(t, err)\n\n    skipRemoveAll = true\n    return func() {\n        ok(t, pool.Destroy())\n        os.RemoveAll(d)\n    }\n}", "focal_id": "TempDir", "focal_loc": [69, 21]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestDatasets", "test_loc": [13, 0], "test": "func TestDatasets(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    _, err := zfs.Datasets(\"\")\n    ok(t, err)\n\n    ds, err := zfs.GetDataset(\"test\")\n    ok(t, err)\n    equals(t, zfs.DatasetFilesystem, ds.Type)\n    equals(t, \"\", ds.Origin)\n    if runtime.GOOS != \"solaris\" {\n        assert(t, ds.Logicalused != 0, \"Logicalused is not greater than 0\")\n    }\n}", "focal_id": "Datasets", "focal_loc": [16, 18]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestDatasetGetProperty", "test_loc": [28, 0], "test": "func TestDatasetGetProperty(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    ds, err := zfs.GetDataset(\"test\")\n    ok(t, err)\n\n    prop, err := ds.GetProperty(\"foobarbaz\")\n    nok(t, err)\n    equals(t, \"\", prop)\n\n    prop, err = ds.GetProperty(\"compression\")\n    ok(t, err)\n    equals(t, \"off\", prop)\n\n    // creation should be a time stamp with spaces in it\n    prop, err = ds.GetProperty(\"creation\")\n    ok(t, err)\n    if len(strings.Fields(prop)) != 5 {\n        t.Errorf(\"expected a string with spaces in it, got: %v\", prop)\n    }\n}", "focal_id": "GetDataset", "focal_loc": [31, 19]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestSnapshots", "test_loc": [50, 0], "test": "func TestSnapshots(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    snapshots, err := zfs.Snapshots(\"\")\n    ok(t, err)\n\n    for _, snapshot := range snapshots {\n        equals(t, zfs.DatasetSnapshot, snapshot.Type)\n    }\n}", "focal_id": "Snapshots", "focal_loc": [53, 26]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestFilesystems", "test_loc": [61, 0], "test": "func TestFilesystems(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    f, err := zfs.CreateFilesystem(\"test/filesystem-test\", nil)\n    ok(t, err)\n\n    filesystems, err := zfs.Filesystems(\"\")\n    ok(t, err)\n\n    for _, filesystem := range filesystems {\n        equals(t, zfs.DatasetFilesystem, filesystem.Type)\n    }\n\n    ok(t, f.Destroy(zfs.DestroyDefault))\n}", "focal_id": "CreateFilesystem", "focal_loc": [64, 18]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestCreateFilesystemWithProperties", "test_loc": [77, 0], "test": "func TestCreateFilesystemWithProperties(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    props := map[string]string{\n        \"compression\": \"lz4\",\n    }\n\n    f, err := zfs.CreateFilesystem(\"test/filesystem-test\", props)\n    ok(t, err)\n\n    equals(t, \"lz4\", f.Compression)\n\n    filesystems, err := zfs.Filesystems(\"\")\n    ok(t, err)\n\n    for _, filesystem := range filesystems {\n        equals(t, zfs.DatasetFilesystem, filesystem.Type)\n    }\n\n    ok(t, f.Destroy(zfs.DestroyDefault))\n}", "focal_id": "CreateFilesystem", "focal_loc": [84, 18]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestVolumes", "test_loc": [99, 0], "test": "func TestVolumes(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    v, err := zfs.CreateVolume(\"test/volume-test\", uint64(pow2(23)), nil)\n    ok(t, err)\n\n    // volumes are sometimes \"busy\" if you try to manipulate them right away\n    sleep(1)\n\n    equals(t, zfs.DatasetVolume, v.Type)\n    volumes, err := zfs.Volumes(\"\")\n    ok(t, err)\n\n    for _, volume := range volumes {\n        equals(t, zfs.DatasetVolume, volume.Type)\n    }\n\n    ok(t, v.Destroy(zfs.DestroyDefault))\n}", "focal_id": "CreateVolume", "focal_loc": [102, 18]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestSnapshot", "test_loc": [119, 0], "test": "func TestSnapshot(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    f, err := zfs.CreateFilesystem(\"test/snapshot-test\", nil)\n    ok(t, err)\n\n    filesystems, err := zfs.Filesystems(\"\")\n    ok(t, err)\n\n    for _, filesystem := range filesystems {\n        equals(t, zfs.DatasetFilesystem, filesystem.Type)\n    }\n\n    s, err := f.Snapshot(\"test\", false)\n    ok(t, err)\n\n    equals(t, zfs.DatasetSnapshot, s.Type)\n\n    equals(t, \"test/snapshot-test@test\", s.Name)\n\n    ok(t, s.Destroy(zfs.DestroyDefault))\n\n    ok(t, f.Destroy(zfs.DestroyDefault))\n}", "focal_id": "CreateFilesystem", "focal_loc": [122, 18]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestClone", "test_loc": [144, 0], "test": "func TestClone(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    f, err := zfs.CreateFilesystem(\"test/snapshot-test\", nil)\n    ok(t, err)\n\n    filesystems, err := zfs.Filesystems(\"\")\n    ok(t, err)\n\n    for _, filesystem := range filesystems {\n        equals(t, zfs.DatasetFilesystem, filesystem.Type)\n    }\n\n    s, err := f.Snapshot(\"test\", false)\n    ok(t, err)\n\n    equals(t, zfs.DatasetSnapshot, s.Type)\n    equals(t, \"test/snapshot-test@test\", s.Name)\n\n    c, err := s.Clone(\"test/clone-test\", nil)\n    ok(t, err)\n\n    equals(t, zfs.DatasetFilesystem, c.Type)\n\n    ok(t, c.Destroy(zfs.DestroyDefault))\n\n    ok(t, s.Destroy(zfs.DestroyDefault))\n\n    ok(t, f.Destroy(zfs.DestroyDefault))\n}", "focal_id": "CreateFilesystem", "focal_loc": [147, 18]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestSendSnapshot", "test_loc": [175, 0], "test": "func TestSendSnapshot(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    f, err := zfs.CreateFilesystem(\"test/snapshot-test\", nil)\n    ok(t, err)\n\n    filesystems, err := zfs.Filesystems(\"\")\n    ok(t, err)\n\n    for _, filesystem := range filesystems {\n        equals(t, zfs.DatasetFilesystem, filesystem.Type)\n    }\n\n    s, err := f.Snapshot(\"test\", false)\n    ok(t, err)\n\n    file, _ := ioutil.TempFile(\"/tmp/\", \"zfs-\")\n    defer file.Close()\n    err = file.Truncate(pow2(30))\n    ok(t, err)\n    defer os.Remove(file.Name())\n\n    err = s.SendSnapshot(file)\n    ok(t, err)\n\n    ok(t, s.Destroy(zfs.DestroyDefault))\n\n    ok(t, f.Destroy(zfs.DestroyDefault))\n}", "focal_id": "CreateFilesystem", "focal_loc": [178, 18]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestChildren", "test_loc": [205, 0], "test": "func TestChildren(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    f, err := zfs.CreateFilesystem(\"test/snapshot-test\", nil)\n    ok(t, err)\n\n    s, err := f.Snapshot(\"test\", false)\n    ok(t, err)\n\n    equals(t, zfs.DatasetSnapshot, s.Type)\n    equals(t, \"test/snapshot-test@test\", s.Name)\n\n    children, err := f.Children(0)\n    ok(t, err)\n\n    equals(t, 1, len(children))\n    equals(t, \"test/snapshot-test@test\", children[0].Name)\n\n    ok(t, s.Destroy(zfs.DestroyDefault))\n    ok(t, f.Destroy(zfs.DestroyDefault))\n}", "focal_id": "CreateFilesystem", "focal_loc": [208, 18]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestListZpool", "test_loc": [227, 0], "test": "func TestListZpool(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    pools, err := zfs.ListZpools()\n    ok(t, err)\n    for _, pool := range pools {\n        if pool.Name == \"test\" {\n            equals(t, \"test\", pool.Name)\n            return\n        }\n    }\n    t.Fatal(\"Failed to find test pool\")\n}", "focal_id": "ListZpools", "focal_loc": [230, 22]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestRollback", "test_loc": [241, 0], "test": "func TestRollback(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    f, err := zfs.CreateFilesystem(\"test/snapshot-test\", nil)\n    ok(t, err)\n\n    filesystems, err := zfs.Filesystems(\"\")\n    ok(t, err)\n\n    for _, filesystem := range filesystems {\n        equals(t, zfs.DatasetFilesystem, filesystem.Type)\n    }\n\n    s1, err := f.Snapshot(\"test\", false)\n    ok(t, err)\n\n    _, err = f.Snapshot(\"test2\", false)\n    ok(t, err)\n\n    s3, err := f.Snapshot(\"test3\", false)\n    ok(t, err)\n\n    err = s3.Rollback(false)\n    ok(t, err)\n\n    err = s1.Rollback(false)\n    assert(t, err != nil, \"should error when rolling back beyond most recent snapshot without destroyMoreRecent = true\")\n\n    err = s1.Rollback(true)\n    ok(t, err)\n\n    ok(t, s1.Destroy(zfs.DestroyDefault))\n\n    ok(t, f.Destroy(zfs.DestroyDefault))\n}", "focal_id": "CreateFilesystem", "focal_loc": [244, 18]}
{"test_id": "mistifyio-go-zfs/mistifyio-go-zfs-2923acc/zfs_test.go::TestDiff", "test_loc": [277, 0], "test": "func TestDiff(t *testing.T) {\n    defer setupZPool(t).cleanUp()\n\n    fs, err := zfs.CreateFilesystem(\"test/origin\", nil)\n    ok(t, err)\n\n    linkedFile, err := os.Create(filepath.Join(fs.Mountpoint, \"linked\"))\n    ok(t, err)\n\n    movedFile, err := os.Create(filepath.Join(fs.Mountpoint, \"file\"))\n    ok(t, err)\n\n    snapshot, err := fs.Snapshot(\"snapshot\", false)\n    ok(t, err)\n\n    unicodeFile, err := os.Create(filepath.Join(fs.Mountpoint, \"i \u2764 unicode\"))\n    ok(t, err)\n\n    err = os.Rename(movedFile.Name(), movedFile.Name()+\"-new\")\n    ok(t, err)\n\n    err = os.Link(linkedFile.Name(), linkedFile.Name()+\"_hard\")\n    ok(t, err)\n\n    inodeChanges, err := fs.Diff(snapshot.Name)\n    ok(t, err)\n    equals(t, 4, len(inodeChanges))\n\n    unicodePath := \"/test/origin/i\\x040\\x1c2\\x135\\x144\\x040unicode\"\n    wants := map[string]*zfs.InodeChange{\n        \"/test/origin/linked\": {\n            Type:                 zfs.File,\n            Change:               zfs.Modified,\n            ReferenceCountChange: 1,\n        },\n        \"/test/origin/file\": {\n            Type:    zfs.File,\n            Change:  zfs.Renamed,\n            NewPath: \"/test/origin/file-new\",\n        },\n        \"/test/origin/i \u2764 unicode\": {\n            Path:   \"\u2764\u2764 unicode \u2764\u2764\",\n            Type:   zfs.File,\n            Change: zfs.Created,\n        },\n        unicodePath: {\n            Path:   \"\u2764\u2764 unicode \u2764\u2764\",\n            Type:   zfs.File,\n            Change: zfs.Created,\n        },\n        \"/test/origin/\": {\n            Type:   zfs.Directory,\n            Change: zfs.Modified,\n        },\n    }\n    for _, change := range inodeChanges {\n        want := wants[change.Path]\n        want.Path = change.Path\n        delete(wants, change.Path)\n\n        equals(t, want, change)\n    }\n\n    equals(t, 1, len(wants))\n    for _, want := range wants {\n        equals(t, \"\u2764\u2764 unicode \u2764\u2764\", want.Path)\n    }\n\n    ok(t, movedFile.Close())\n    ok(t, unicodeFile.Close())\n    ok(t, linkedFile.Close())\n    ok(t, snapshot.Destroy(zfs.DestroyForceUmount))\n    ok(t, fs.Destroy(zfs.DestroyForceUmount))\n}\n", "focal_id": "CreateFilesystem", "focal_loc": [280, 19]}
