{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_LogRequest", "test": "func TestServer_LogRequest(t *testing.T) {\n    s := &Server{}\n\n    ctx := context.Background()\n    ctx = context.WithValue(ctx, ExtraLogFieldsCtxKey, new(ExtraLogFields))\n    req := httptest.NewRequest(http.MethodGet, \"/\", nil).WithContext(ctx)\n    rec := httptest.NewRecorder()\n    wrec := NewResponseRecorder(rec, nil, nil)\n\n    duration := 50 * time.Millisecond\n    repl := NewTestReplacer(req)\n    bodyReader := &lengthReader{Source: req.Body}\n    shouldLogCredentials := false\n\n    buf := bytes.Buffer{}\n    accLog := testLogger(buf.Write)\n    s.logRequest(accLog, req, wrec, &duration, repl, bodyReader, shouldLogCredentials)\n\n    assert.JSONEq(t, `{\n        \"msg\":\"handled request\", \"level\":\"info\", \"bytes_read\":0,\n        \"duration\":\"50ms\", \"resp_headers\": {}, \"size\":0,\n        \"status\":0, \"user_id\":\"\"\n    }`, buf.String())\n}", "error": "GoDef Request Failed: Didn't receive <class 'sansio_lsp_client.events.Definition'> in time; have: [WorkDoneProgressCreate(token=7827067141633954287),\n WorkDoneProgressBegin(token=7827067141633954287, value=WorkDoneProgressBeginValue(kind='begin', title='Setting up workspace', cancellable=None, message='Loading packages...', percentage=None)),\n ConfigurationRequest(items=[ConfigurationItem(scopeUri='file:///root/autodl-tmp/UniTSyn/data/repos/caddyserver-caddy/caddyserver-caddy-e2e2a52', section='gopls')]),\n LogMessage(type=<MessageType.INFO: 3>, message='2025/02/12 01:23:50 Created View (#1)\\n\\tdirectory=/root/autodl-tmp/UniTSyn/data/repos/caddyserver-caddy/caddyserver-caddy-e2e2a52\\n\\tview_type=\"GoMod\"\\n\\troot_dir=\"file:///root/autodl-tmp/UniTSyn/data/repos/caddyserver-caddy/caddyserver-caddy-e2e2a52\"\\n\\tgo_version=\"go version go1.23.0 linux/amd64\"\\n\\tbuild_flags=[]\\n\\tenv={GOOS:linux GOARCH:amd64 GOCACHE:/root/.cache/go-build GOMODCACHE:/root/go/pkg/mod GOPATH:/root/go GOPRIVATE: GOFLAGS: GO111MODULE: GOTOOLCHAIN:auto GOROOT:/root/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.0.linux-amd64 GoVersion:21 GoVersionOutput:go version go1.23.0 linux/amd64\\n ExplicitGOWORK: EffectiveGOPACKAGESDRIVER:}\\n\\tenv_overlay=[]\\n'),\n LogMessage(type=<MessageType.INFO: 3>, message='2025/02/12 01:24:36 go/packages.Load #1\\n\\tview_id=\"1\"\\n\\tsnapshot=0\\n\\tdirectory=/root/autodl-tmp/UniTSyn/data/repos/caddyserver-caddy/caddyserver-caddy-e2e2a52\\n\\tquery=[/root/autodl-tmp/UniTSyn/data/repos/caddyserver-caddy/caddyserver-caddy-e2e2a52/... builtin]\\n\\tpackages=91\\n\\tduration=46.210415263s\\n'),\n WorkDoneProgressEnd(token=7827067141633954287, value=WorkDoneProgressEndValue(kind='end', message='Finished loading packages.')),\n RegisterCapabilityRequest(registrations=[Registration(id='workspace/didChangeConfiguration', method='workspace/didChangeConfiguration', registerOptions=None)])]"}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_LogRequest_WithTrace", "test": "func TestServer_LogRequest_WithTrace(t *testing.T) {\n    s := &Server{}\n\n    extra := new(ExtraLogFields)\n    ctx := context.WithValue(context.Background(), ExtraLogFieldsCtxKey, extra)\n    extra.Add(zap.String(\"traceID\", \"1234567890abcdef\"))\n    extra.Add(zap.String(\"spanID\", \"12345678\"))\n\n    req := httptest.NewRequest(http.MethodGet, \"/\", nil).WithContext(ctx)\n    rec := httptest.NewRecorder()\n    wrec := NewResponseRecorder(rec, nil, nil)\n\n    duration := 50 * time.Millisecond\n    repl := NewTestReplacer(req)\n    bodyReader := &lengthReader{Source: req.Body}\n    shouldLogCredentials := false\n\n    buf := bytes.Buffer{}\n    accLog := testLogger(buf.Write)\n    s.logRequest(accLog, req, wrec, &duration, repl, bodyReader, shouldLogCredentials)\n\n    assert.JSONEq(t, `{\n        \"msg\":\"handled request\", \"level\":\"info\", \"bytes_read\":0,\n        \"duration\":\"50ms\", \"resp_headers\": {}, \"size\":0,\n        \"status\":0, \"user_id\":\"\",\n        \"traceID\":\"1234567890abcdef\",\n        \"spanID\":\"12345678\"\n    }`, buf.String())\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_TrustedRealClientIP_NoTrustedHeaders", "test": "func TestServer_TrustedRealClientIP_NoTrustedHeaders(t *testing.T) {\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"192.0.2.1:12345\"\n    ip := trustedRealClientIP(req, []string{}, \"192.0.2.1\")\n\n    assert.Equal(t, ip, \"192.0.2.1\")\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_TrustedRealClientIP_OneTrustedHeaderEmpty", "test": "func TestServer_TrustedRealClientIP_OneTrustedHeaderEmpty(t *testing.T) {\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"192.0.2.1:12345\"\n    ip := trustedRealClientIP(req, []string{\"X-Forwarded-For\"}, \"192.0.2.1\")\n\n    assert.Equal(t, ip, \"192.0.2.1\")\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_TrustedRealClientIP_OneTrustedHeaderInvalid", "test": "func TestServer_TrustedRealClientIP_OneTrustedHeaderInvalid(t *testing.T) {\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"192.0.2.1:12345\"\n    req.Header.Set(\"X-Forwarded-For\", \"not, an, ip\")\n    ip := trustedRealClientIP(req, []string{\"X-Forwarded-For\"}, \"192.0.2.1\")\n\n    assert.Equal(t, ip, \"192.0.2.1\")\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_TrustedRealClientIP_OneTrustedHeaderValid", "test": "func TestServer_TrustedRealClientIP_OneTrustedHeaderValid(t *testing.T) {\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"192.0.2.1:12345\"\n    req.Header.Set(\"X-Forwarded-For\", \"10.0.0.1\")\n    ip := trustedRealClientIP(req, []string{\"X-Forwarded-For\"}, \"192.0.2.1\")\n\n    assert.Equal(t, ip, \"10.0.0.1\")\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_TrustedRealClientIP_OneTrustedHeaderValidArray", "test": "func TestServer_TrustedRealClientIP_OneTrustedHeaderValidArray(t *testing.T) {\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"192.0.2.1:12345\"\n    req.Header.Set(\"X-Forwarded-For\", \"1.1.1.1, 2.2.2.2, 3.3.3.3\")\n    ip := trustedRealClientIP(req, []string{\"X-Forwarded-For\"}, \"192.0.2.1\")\n\n    assert.Equal(t, ip, \"1.1.1.1\")\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_TrustedRealClientIP_IncludesPort", "test": "func TestServer_TrustedRealClientIP_IncludesPort(t *testing.T) {\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"192.0.2.1:12345\"\n    req.Header.Set(\"X-Forwarded-For\", \"1.1.1.1:1234\")\n    ip := trustedRealClientIP(req, []string{\"X-Forwarded-For\"}, \"192.0.2.1\")\n\n    assert.Equal(t, ip, \"1.1.1.1\")\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_TrustedRealClientIP_SkipsInvalidIps", "test": "func TestServer_TrustedRealClientIP_SkipsInvalidIps(t *testing.T) {\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"192.0.2.1:12345\"\n    req.Header.Set(\"X-Forwarded-For\", \"not an ip, bad bad, 10.0.0.1\")\n    ip := trustedRealClientIP(req, []string{\"X-Forwarded-For\"}, \"192.0.2.1\")\n\n    assert.Equal(t, ip, \"10.0.0.1\")\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_TrustedRealClientIP_MultipleTrustedHeaderValidArray", "test": "func TestServer_TrustedRealClientIP_MultipleTrustedHeaderValidArray(t *testing.T) {\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"192.0.2.1:12345\"\n    req.Header.Set(\"Real-Client-IP\", \"1.1.1.1, 2.2.2.2, 3.3.3.3\")\n    req.Header.Set(\"X-Forwarded-For\", \"3.3.3.3, 4.4.4.4\")\n    ip1 := trustedRealClientIP(req, []string{\"X-Forwarded-For\", \"Real-Client-IP\"}, \"192.0.2.1\")\n    ip2 := trustedRealClientIP(req, []string{\"Real-Client-IP\", \"X-Forwarded-For\"}, \"192.0.2.1\")\n    ip3 := trustedRealClientIP(req, []string{\"Missing-Header-IP\", \"Real-Client-IP\", \"X-Forwarded-For\"}, \"192.0.2.1\")\n\n    assert.Equal(t, ip1, \"3.3.3.3\")\n    assert.Equal(t, ip2, \"1.1.1.1\")\n    assert.Equal(t, ip3, \"1.1.1.1\")\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_DetermineTrustedProxy_NoConfig", "test": "func TestServer_DetermineTrustedProxy_NoConfig(t *testing.T) {\n    server := &Server{}\n\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"192.0.2.1:12345\"\n\n    trusted, clientIP := determineTrustedProxy(req, server)\n\n    assert.False(t, trusted)\n    assert.Equal(t, clientIP, \"192.0.2.1\")\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_DetermineTrustedProxy_NoConfigIpv6", "test": "func TestServer_DetermineTrustedProxy_NoConfigIpv6(t *testing.T) {\n    server := &Server{}\n\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"[::1]:12345\"\n\n    trusted, clientIP := determineTrustedProxy(req, server)\n\n    assert.False(t, trusted)\n    assert.Equal(t, clientIP, \"::1\")\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_DetermineTrustedProxy_NoConfigIpv6Zones", "test": "func TestServer_DetermineTrustedProxy_NoConfigIpv6Zones(t *testing.T) {\n    server := &Server{}\n\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"[::1%eth2]:12345\"\n\n    trusted, clientIP := determineTrustedProxy(req, server)\n\n    assert.False(t, trusted)\n    assert.Equal(t, clientIP, \"::1\")\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_DetermineTrustedProxy_TrustedLoopback", "test": "func TestServer_DetermineTrustedProxy_TrustedLoopback(t *testing.T) {\n    loopbackPrefix, _ := netip.ParsePrefix(\"127.0.0.1/8\")\n\n    server := &Server{\n        trustedProxies: &StaticIPRange{\n            ranges: []netip.Prefix{loopbackPrefix},\n        },\n        ClientIPHeaders: []string{\"X-Forwarded-For\"},\n    }\n\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"127.0.0.1:12345\"\n    req.Header.Set(\"X-Forwarded-For\", \"31.40.0.10\")\n\n    trusted, clientIP := determineTrustedProxy(req, server)\n\n    assert.True(t, trusted)\n    assert.Equal(t, clientIP, \"31.40.0.10\")\n}", "error": "GoDef Request Failed: "}
{"test_id": "caddyserver-caddy/caddyserver-caddy-e2e2a52/modules/caddyhttp/server_test.go::TestServer_DetermineTrustedProxy_UntrustedPrefix", "test": "func TestServer_DetermineTrustedProxy_UntrustedPrefix(t *testing.T) {\n    loopbackPrefix, _ := netip.ParsePrefix(\"127.0.0.1/8\")\n\n    server := &Server{\n        trustedProxies: &StaticIPRange{\n            ranges: []netip.Prefix{loopbackPrefix},\n        },\n        ClientIPHeaders: []string{\"X-Forwarded-For\"},\n    }\n\n    req := httptest.NewRequest(\"GET\", \"/\", nil)\n    req.RemoteAddr = \"10.0.0.1:12345\"\n    req.Header.Set(\"X-Forwarded-For\", \"31.40.0.10\")\n\n    trusted, clientIP := determineTrustedProxy(req, server)\n\n    assert.False(t, trusted)\n    assert.Equal(t, clientIP, \"10.0.0.1\")\n}", "error": "GoDef Request Failed: "}
